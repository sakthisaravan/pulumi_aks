"use strict";
// Copyright 2025-2025, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
// Use the TypeScript shim which allows us to fallback to a vendored version of
// TypeScript if the user has not installed it.
// TODO: we should consider requiring the user to install TypeScript and not
// rely on the shim. In any case, we should add tests for providers with
// different versions of TypeScript in their dependencies, to ensure the
// analyzer code is compatible with all of them.
const ts = require("../../typescript-shim");
class Analyzer {
    constructor(dir, providerName) {
        this.components = {};
        this.typeDefinitions = {};
        const configPath = `${dir}/tsconfig.json`;
        const config = ts.readConfigFile(configPath, ts.sys.readFile);
        const parsedConfig = ts.parseJsonConfigFileContent(config.config, ts.sys, path.dirname(configPath));
        this.path = dir;
        this.providerName = providerName;
        this.program = ts.createProgram({
            rootNames: parsedConfig.fileNames,
            options: parsedConfig.options,
        });
        this.checker = this.program.getTypeChecker();
    }
    analyze() {
        const sourceFiles = this.program.getSourceFiles();
        for (const sourceFile of sourceFiles) {
            if (sourceFile.fileName.includes("node_modules") || sourceFile.fileName.endsWith(".d.ts")) {
                continue;
            }
            this.analyseFile(sourceFile);
        }
        return {
            components: this.components,
            typeDefinitions: this.typeDefinitions,
        };
    }
    findComponent(name) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const sourceFiles = this.program.getSourceFiles();
            for (const sourceFile of sourceFiles) {
                if (sourceFile.fileName.includes("node_modules") || sourceFile.fileName.endsWith(".d.ts")) {
                    continue;
                }
                for (const node of sourceFile.statements) {
                    if (ts.isClassDeclaration(node) && this.isPulumiComponent(node) && node.name) {
                        if (ts.isClassDeclaration(node) && this.isPulumiComponent(node) && ((_a = node.name) === null || _a === void 0 ? void 0 : _a.text) === name) {
                            try {
                                const module = yield Promise.resolve().then(() => __importStar(require(sourceFile.fileName)));
                                return module[name];
                            }
                            catch (e) {
                                throw new Error(`Failed to import component '${name}': ${e}`);
                            }
                        }
                    }
                }
            }
            throw new Error(`Component '${name}' not found`);
        });
    }
    analyseFile(sourceFile) {
        // We intentionally visit only the top-level nodes, because we only
        // support components defined at the top-level. We have no way to
        // instantiate components defined inside functions or methods.
        sourceFile.forEachChild((node) => {
            if (ts.isClassDeclaration(node) && this.isPulumiComponent(node) && node.name) {
                const component = this.analyzeComponent(node);
                this.components[component.name] = component;
            }
        });
    }
    analyzeComponent(node) {
        var _a;
        const componentName = (_a = node.name) === null || _a === void 0 ? void 0 : _a.text;
        // We expect exactly 1 constructor, and it must have and 'args'
        // parameter that has an interface type.
        const constructors = node.members.filter((member) => ts.isConstructorDeclaration(member));
        if (constructors.length !== 1) {
            throw new Error(`Component '${componentName}' must have exactly one constructor`);
        }
        const argsParam = constructors === null || constructors === void 0 ? void 0 : constructors[0].parameters.find((param) => {
            return ts.isIdentifier(param.name) && param.name.escapedText === "args";
        });
        if (!argsParam) {
            throw new Error(`Component '${componentName}' constructor must have an 'args' parameter`);
        }
        if (!argsParam.type) {
            throw new Error(`Component '${componentName}' constructor 'args' parameter must have a type`);
        }
        const args = this.checker.getTypeAtLocation(argsParam.type);
        const argsSymbol = args.getSymbol();
        if (!argsSymbol || !isInterface(argsSymbol)) {
            throw new Error(`Component '${componentName}' constructor 'args' parameter must be an interface`);
        }
        let inputs = {};
        if (argsSymbol.members) {
            inputs = this.analyzeSymbols(symbolTableToSymbols(argsSymbol.members), argsParam);
        }
        let outputs = {};
        const classType = this.checker.getTypeAtLocation(node);
        const classSymbol = classType.getSymbol();
        if (classSymbol === null || classSymbol === void 0 ? void 0 : classSymbol.members) {
            outputs = this.analyzeSymbols(symbolTableToSymbols(classSymbol.members), node);
        }
        return {
            name: componentName,
            inputs,
            outputs,
        };
    }
    isPulumiComponent(node) {
        if (!node.heritageClauses) {
            return false;
        }
        return node.heritageClauses.some((clause) => {
            return clause.types.some((clauseNode) => {
                var _a;
                const type = this.checker.getTypeAtLocation(clauseNode);
                const symbol = type.getSymbol();
                const matchesName = (symbol === null || symbol === void 0 ? void 0 : symbol.escapedName) === "ComponentResource";
                const sourceFile = (_a = symbol === null || symbol === void 0 ? void 0 : symbol.declarations) === null || _a === void 0 ? void 0 : _a[0].getSourceFile();
                const matchesSourceFile = (sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.fileName.endsWith("resource.ts")) || (sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.fileName.endsWith("resource.d.ts"));
                return matchesName && matchesSourceFile;
            });
        });
    }
    analyzeSymbols(symbols, location) {
        const properties = {};
        symbols.forEach((member) => {
            if (!isPropertyDeclaration(member)) {
                return;
            }
            const name = member.escapedName;
            properties[name] = this.analyzeSymbol(member, location);
        });
        return properties;
    }
    analyzeSymbol(symbol, location) {
        // Check if the property is optional, e.g.: myProp?: string; This is
        // defined on the symbol, not the type.
        const optional = isOptional(symbol);
        const propType = this.checker.getTypeOfSymbolAtLocation(symbol, location);
        return this.analyzeType(propType, location, optional, true);
    }
    analyzeType(type, location, optional = false, plain = true) {
        var _a, _b, _c;
        if (isSimpleType(type)) {
            const prop = { type: tsTypeToPropertyType(type) };
            if (optional) {
                prop.optional = true;
            }
            if (plain) {
                prop.plain = true;
            }
            return prop;
        }
        else if (isInput(type)) {
            // Grab the promise type from the `T | Promise<T> | OutputInstance<T>`
            // union, and get the type reference `T` from there. With that we
            // can recursively analyze the type, passing through the optional
            // flag. The type can now not be plain anymore, since it's in an
            // input.
            const base = (_b = (_a = type) === null || _a === void 0 ? void 0 : _a.types) === null || _b === void 0 ? void 0 : _b.find(isPromise);
            if (!base) {
                // unreachable due to the isInput check
                throw new Error(`Input type union must include a Promise, got '${this.checker.typeToString(type)}'`);
            }
            const innerType = this.unwrapTypeReference(base);
            return this.analyzeType(innerType, location, optional, false /* plain */);
        }
        else if (isOutput(type)) {
            type = unwrapOutputIntersection(type);
            // Grab the inner type of the OutputInstance<T> type, and then
            // recurse, passing through the optional flag. The type can now not
            // be plain anymore, since it's wrapped in an output.
            const innerType = this.unwrapTypeReference(type);
            return this.analyzeType(innerType, location, optional, false /* plain */);
        }
        else if (isAsset(type)) {
            const $ref = "pulumi.json#/Asset";
            const prop = { $ref };
            if (optional) {
                prop.optional = true;
            }
            if (plain) {
                prop.plain = true;
            }
            return prop;
        }
        else if (isArchive(type)) {
            const $ref = "pulumi.json#/Archive";
            const prop = { $ref };
            if (optional) {
                prop.optional = true;
            }
            if (plain) {
                prop.plain = true;
            }
            return prop;
        }
        else if (type.isClassOrInterface()) {
            // This is a complex type, create a typedef and then reference it in
            // the PropertyDefinition.
            const name = (_c = type.getSymbol()) === null || _c === void 0 ? void 0 : _c.escapedName;
            if (!name) {
                throw new Error(`Class or interface '${this.checker.typeToString(type)}}' has no name`);
            }
            if (this.typeDefinitions[name]) {
                // Type already exists, just reference it and we're done.
                const refProp = { $ref: `#/types/${this.providerName}:index:${name}` };
                if (optional) {
                    refProp.optional = true;
                }
                if (plain) {
                    refProp.plain = true;
                }
                return refProp;
            }
            // Immediately add an empty type definition, so that it can be
            // referenced recursively, then analyze the properties.
            this.typeDefinitions[name] = { name, properties: {} };
            const properties = this.analyzeSymbols(type.getProperties(), location);
            this.typeDefinitions[name].properties = properties;
            const $ref = `#/types/${this.providerName}:index:${name}`;
            const prop = { $ref };
            if (optional) {
                prop.optional = true;
            }
            if (plain) {
                prop.plain = true;
            }
            return prop;
        }
        else if (isMapType(type, this.checker)) {
            const prop = { type: "object" };
            if (optional) {
                prop.optional = true;
            }
            if (plain) {
                prop.plain = true;
            }
            // We got { [key: string]: <indexInfo.type> }
            const indexInfo = this.checker.getIndexInfoOfType(type, ts.IndexKind.String);
            if (!indexInfo) {
                // We can't actually get here because isMapType checks for indexInfo
                throw new Error(`Map type has no index info`);
            }
            prop.additionalProperties = this.analyzeType(indexInfo.type, location, false /* optional */, plain);
            return prop;
        }
        else if (type.isUnion()) {
            throw new Error(`Union types are not supported, got '${this.checker.typeToString(type)}'`);
        }
        else if (type.isIntersection()) {
            throw new Error(`Intersection types are not supported, got '${this.checker.typeToString(type)}'`);
        }
        throw new Error(`Unsupported type '${this.checker.typeToString(type)}'`);
    }
    unwrapTypeReference(type) {
        const typeArguments = type.typeArguments;
        if (!typeArguments || typeArguments.length !== 1) {
            throw new Error(`Expected exactly one type argument in '${this.checker.typeToString(type)}', got '${typeArguments === null || typeArguments === void 0 ? void 0 : typeArguments.length}'`);
        }
        const innerType = typeArguments[0];
        return innerType;
    }
}
exports.Analyzer = Analyzer;
function isOptional(symbol) {
    return (symbol.flags & ts.SymbolFlags.Optional) === ts.SymbolFlags.Optional;
}
function isInterface(symbol) {
    return (symbol.flags & ts.SymbolFlags.Interface) === ts.SymbolFlags.Interface;
}
function isPropertyDeclaration(symbol) {
    return (symbol.flags & ts.SymbolFlags.Property) === ts.SymbolFlags.Property;
}
function isNumber(type) {
    return (type.flags & ts.TypeFlags.Number) === ts.TypeFlags.Number;
}
function isString(type) {
    return (type.flags & ts.TypeFlags.String) === ts.TypeFlags.String;
}
function isBoolean(type) {
    return (type.flags & ts.TypeFlags.Boolean) === ts.TypeFlags.Boolean;
}
function isSimpleType(type) {
    return isNumber(type) || isString(type) || isBoolean(type);
}
function isMapType(type, checker) {
    const indexInfo = checker.getIndexInfoOfType(type, ts.IndexKind.String);
    return indexInfo !== undefined;
}
function isPromise(type) {
    if (!(type.flags & ts.TypeFlags.Object)) {
        return false;
    }
    const symbol = type.symbol;
    if (!symbol) {
        return false;
    }
    return symbol.name === "Promise";
}
function isOutput(type) {
    var _a;
    // In sdk/nodejs/output.ts we define Output as:
    //
    //   export type Output<T> = OutputInstance<T> & Lifted<T>;
    //
    // Depending on T, we might have an OutputInstance<T> because Lifted<T>
    // does not add anything to the resulting type, or we get the
    // intersection. In the latter case, we want to find the
    // OutputInstance<T> within the intersection.
    if (type.isIntersection()) {
        for (const t of type.types) {
            if (isOutput(t)) {
                return true;
            }
        }
    }
    const symbol = type.getSymbol();
    const matchesName = (symbol === null || symbol === void 0 ? void 0 : symbol.escapedName) === "OutputInstance" || (symbol === null || symbol === void 0 ? void 0 : symbol.escapedName) === "Output";
    const sourceFile = (_a = symbol === null || symbol === void 0 ? void 0 : symbol.declarations) === null || _a === void 0 ? void 0 : _a[0].getSourceFile();
    const matchesSourceFile = (sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.fileName.endsWith("output.ts")) || (sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.fileName.endsWith("output.d.ts"));
    return !!matchesName && !!matchesSourceFile;
}
function isAsset(type) {
    var _a;
    const symbol = type.getSymbol();
    const matchesName = (symbol === null || symbol === void 0 ? void 0 : symbol.escapedName) === "Asset";
    const sourceFile = (_a = symbol === null || symbol === void 0 ? void 0 : symbol.declarations) === null || _a === void 0 ? void 0 : _a[0].getSourceFile();
    const matchesSourceFile = (sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.fileName.endsWith("asset.ts")) || (sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.fileName.endsWith("asset.d.ts"));
    return !!matchesName && !!matchesSourceFile;
}
function isArchive(type) {
    var _a;
    const symbol = type.getSymbol();
    const matchesName = (symbol === null || symbol === void 0 ? void 0 : symbol.escapedName) === "Archive";
    const sourceFile = (_a = symbol === null || symbol === void 0 ? void 0 : symbol.declarations) === null || _a === void 0 ? void 0 : _a[0].getSourceFile();
    const matchesSourceFile = (sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.fileName.endsWith("archive.ts")) || (sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.fileName.endsWith("archive.d.ts"));
    return !!matchesName && !!matchesSourceFile;
}
function unwrapOutputIntersection(type) {
    // Output<T> is an intersection type `OutputInstance<T> & Lifted<T>`, and
    // we want to find the `OutputInstance<T>` within the intersection for
    // further analysis.
    // Depending on `T`, TypeScript sometimes infers Output<T> directly as
    // `OutputInstance<T>`, dropping the `Lifted<T>` part.
    if (type.isIntersection()) {
        for (const t of type.types) {
            if (isOutput(t)) {
                return t;
            }
        }
    }
    return type;
}
/**
 * An input type is a union of Output<T>, Promise<T>, and T.
 */
function isInput(type) {
    if (!type.isUnion()) {
        return false;
    }
    let hasOutput = false;
    let hasPromise = false;
    let hasOther = false;
    for (const t of type.types) {
        if (isOutput(t)) {
            hasOutput = true;
        }
        else if (isPromise(t)) {
            hasPromise = true;
        }
        else {
            hasOther = true;
        }
    }
    return hasOutput && hasPromise && hasOther;
}
function tsTypeToPropertyType(type) {
    var _a;
    if (isNumber(type)) {
        return "number";
    }
    else if (isString(type)) {
        return "string";
    }
    else if (isBoolean(type)) {
        return "boolean";
    }
    throw new Error(`Unsupported type '${(_a = type.symbol) === null || _a === void 0 ? void 0 : _a.name}'`);
}
function symbolTableToSymbols(table) {
    const symbols = [];
    table.forEach((symbol) => {
        symbols.push(symbol);
    });
    return symbols;
}
//# sourceMappingURL=analyzer.js.map